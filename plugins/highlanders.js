var hlr = {
    version: 0,

    maintainers: ['TheUnknownOne'],
    support: ['TheUnknownOne'],

    isMaintainer: function (id) {
        return hlr.maintainers.indexOf(hlr.nameOf(id)) > -1;
    },
    onSupportTeam: function (id) {
        return hlr.support.indexOf(hlr.nameOf(id)) > -1;
    },

    channame: "Highlanders",
    chan: -1
};

hlr.chan = sys.createChannel(hlr.channame) || sys.channelId(hlr.channame);
// Generated by CoffeeScript 1.7.1
var itemCbs,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

hlr.Class = (function() {
  function Class(_arg) {
    this.id = _arg.id, this.name = _arg.name, this.loadout = _arg.loadout;
  }

  return Class;

})();

hlr["class"] = function(id) {
  return hlr.classes.classes[id];
};

hlr.classes = {};

hlr.classes.classes = {};

hlr.classes.makeClass = function(params) {
  var clas;
  clas = new hlr.Class(params);
  return hlr.classes.classes[clas.id] = clas;
};

hlr.addClasses = function() {
  var makeClass;
  makeClass = hlr.makeClass;
  return makeClass({
    id: "scout",
    name: "Scout",
    loadout: ["scattergun", "pistol_scout", "bat"]
  });
};

hlr.commands = {};

hlr.canUseCommand = function(src, command, chan) {
  if (!hlr.commands.hasOwnProperty(command)) {
    return false;
  }
  command = hlr.commands[command];
  if (hlr.isMaintainer(src)) {
    return true;
  }
  if (command.auth === 'maintainer') {
    return false;
  }
  if (command.auth === 'support') {
    return hlr.onSupportTeam(src);
  }
  if (command.auth === 'registered') {
    if (hlr.player.registered(src)) {
      return true;
    } else {
      throw "In order to use this command, you must first <a href='po:send//hlrreg'>Register a Highlanders account</a>, or sign into an already existing account.";
    }
  }
  return true;
};

hlr.handleCommand = function(src, message, command, commandData, tar, chan) {
  return hlr.commands[command].handler.call({
    src: src,
    command: command,
    commandData: commandData,
    tar: tar,
    chan: chan,
    message: message
  });
};

hlr.addCommand = function(name, handler, auth) {
  if (auth == null) {
    auth = '';
  }
  return hlr.commands[name] = {
    name: name,
    handler: handler,
    auth: auth
  };
};

hlr.authSupport = 'support';

hlr.authRegistered = 'registered';

hlr.authMaintainer = 'maintainer';

hlr.addCommands = function() {
  var addCommand, maintainer, registered, support;
  addCommand = hlr.addCommand, support = hlr.authSupport, maintainer = hlr.authMaintainer, registered = hlr.authRegistered;
  addCommand('commands', function() {
    return hlr.sendTo(this.src, "Highlanders Commands\n====================\n\ncommands: Shows this message.\nregister: Register a highlanders account on this name.\n\nTo use the following, you must have registered first:\n-----------------------------------------------------\n\ninventory: Shows your inventory.", chan);
  });
  return addCommand('register', function() {
    if (hlr.player.registered(this.src)) {
      return hlr.sendErrorTo(this.src, "Your account is already registered.", this.chan);
    } else {
      hlr.player.register(this.src);
      return hlr.sendTo(this.src, "Account registered! Check out the other commands.", this.chan);
    }
  });
};

hlr.inv = {};

hlr.inv.resolveItem = function(id, itemid) {
  return hlr.player.player(id).inventory[itemid];
};

hlr.inv.giveItem = function(id, item) {
  var player;
  player = hlr.player(id);
  if (player == null) {
    hlr.error("hlr.giveItemTo: bad player");
  } else if (player.inventory[item.id] != null) {
    hlr.error("hlr.giveItemTo: item " + (JSON.stringify(item)) + " already in inventory of " + id);
  }
  return player.inventory[item.id] = item;
};

hlr.inv.loadoutForClass = function(id, clas) {
  var player;
  return player = hlr.player(id);
};

hlr.items = {};

hlr.itemstore = null;

itemCbs = [];

hlr.Item = (function() {
  function Item(_arg) {
    this.id = _arg.id, this.name = _arg.name, this.desc = _arg.desc, this.slot = _arg.slot, this.classes = _arg.classes;
    this.attributes = [];
  }

  Item.Primary = 0;

  Item.Secondary = 1;

  Item.Melee = 2;

  Item.Cosmetic = 3;

  Item.Misc = 4;

  Item.Taunt = 5;

  Item.Unique = 0;

  Item.Genuine = 1;

  return Item;

})();

hlr.InventoryItem = (function() {
  function InventoryItem(_arg) {
    this.item = _arg.item, this.id = _arg.id, this.quality = _arg.quality;
  }

  InventoryItem.prototype.toJSON = function() {
    return {
      item: this.item,
      id: this.id,
      quality: this.quality
    };
  };

  InventoryItem.prototype.name = function() {
    return "" + (this.quality === hlr.Item.Unique ? '' : hlr.itemQualityName(this.quality) + ' ') + (hlr.item(this.item).name);
  };

  return InventoryItem;

})();

hlr.itemSlotName = function(slot) {
  var item;
  item = hlr.Item;
  switch (slot) {
    case item.Primary:
      return "Primary";
    case item.Secondary:
      return "Secondary";
    case item.Melee:
      return "Melee";
    case item.Cosmetic:
      return "Cosmetic";
    case item.Misc:
      return "Misc";
    case item.Taunt:
      return "Taunt";
    default:
      return hlr.error("hlr.itemSlotName: unknown item slot " + slot);
  }
};

hlr.itemQualityName = function(quality) {
  var item;
  item = hlr.Item;
  switch (quality) {
    case item.Unique:
      return "Unique";
    case item.Genuine:
      return "Genuine";
    default:
      return hlr.error("hlr.itemQualityName: unknown item quality " + quality);
  }
};

hlr.item = function(id) {
  return hlr.items[id];
};

hlr.registerItem = function(item) {
  return hlr.items[item.id] = item;
};

hlr.makeItem = function(_arg) {
  var clas, classes, classids, desc, id, name, slot, _i, _len;
  id = _arg.id, name = _arg.name, desc = _arg.desc, classes = _arg.classes, slot = _arg.slot;
  if (desc == null) {
    desc = "";
  }
  classids = [];
  for (_i = 0, _len = classes.length; _i < _len; _i++) {
    clas = classes[_i];
    classids.push(hlr["class"](clas).idc);
  }
  return hlr.registerItem(new hlr.Item({
    id: id,
    name: name,
    desc: desc,
    classes: classids,
    slot: slot
  }));
};

hlr.createItem = function(_arg) {
  var item, quality;
  item = _arg.item, quality = _arg.quality;
  if (!item) {
    hlr.error("hlr.createItem: no item given");
  }
  if (!quality) {
    hlr.error("hlr.createItem: no quality given");
  }
  item = new hlr.InventoryItem({
    item: item,
    id: hlr.itemstore.uniqid,
    quality: quality
  });
  hlr.itemstore.uniqid += 1;
  return item;
};

hlr.addItems = function(cb) {
  var adds, _i, _len;
  if (cb) {
    itemCbs.push(cb);
  } else {
    for (_i = 0, _len = itemCbs.length; _i < _len; _i++) {
      adds = itemCbs[_i];
      adds();
    }
  }
  return null;
};

hlr.initItemStorage = function() {
  var ItemJsonStore;
  ItemJsonStore = (function(_super) {
    __extends(ItemJsonStore, _super);

    function ItemJsonStore() {
      return ItemJsonStore.__super__.constructor.apply(this, arguments);
    }

    ItemJsonStore.prototype.initDefaults = function() {
      var _base;
      return (_base = this.hash).uniqid != null ? _base.uniqid : _base.uniqid = 0;
    };

    return ItemJsonStore;

  })(hlr.JsonStore);
  hlr._itemjsonstore = new ItemJsonStore("hlr-items.json");
  return hlr.itemstore = hlr._itemjsonstore.hash;
};

hlr.addItems = function() {
  var Melee;
  Melee = hlr.Item.Melee;
  return hlr.makeItem({
    id: "bat",
    name: "Bat",
    classes: ["scout"],
    slot: Melee
  });
};

hlr.addItems = function() {
  var Primary;
  Primary = hlr.Item.Primary;
  return hlr.makeItem({
    id: "scattergun",
    name: "Scattergun",
    classes: ["scout"],
    slot: Primary
  });
};

hlr.addItems = function() {
  var Secondary;
  Secondary = hlr.Item.Secondary;
  return hlr.makeItem({
    id: "pistol_scout",
    name: "Pistol",
    classes: ["scout"],
    slot: Secondary
  });
};

hlr.persistence = {
  stores: []
};

hlr.JsonStore = (function() {
  function JsonStore(file, saverate) {
    this.file = file;
    this.saverate = saverate != null ? saverate : 60;
    hlr.persistence.stores.push(this);
    this.hash = {};
    this.dirty = false;
    this.load();
    this.initDefaults();
  }

  JsonStore.prototype.markDirty = function() {
    return this.dirty = true;
  };

  JsonStore.prototype.load = function() {
    if (sys.fileExist(this.file)) {
      return this.hash = JSON.parse(sys.getFileContent(this.file));
    }
  };

  JsonStore.prototype.saveAll = function() {
    if (this.dirty) {
      return sys.writeToFile(this.file, JSON.stringify(this.hash));
    }
  };

  JsonStore.prototype.initDefaults = function() {};

  return JsonStore;

})();

hlr.sendMsg = function(message, chan) {
  if (chan == null) {
    chan = hlr.chan;
  }
  return sys.sendAll(message, chan);
};

hlr.sendHtml = function(message, chan) {
  if (chan == null) {
    chan = hlr.chan;
  }
  return sys.sendHtmlAll(message, chan);
};

hlr.sendPlayer = function(src, message, chan) {
  if (chan == null) {
    chan = hlr.chan;
  }
  return sys.sendMessage(src, message, chan);
};

hlr.sendPlayerHtml = function(src, message, chan) {
  if (chan == null) {
    chan = hlr.chan;
  }
  return sys.sendHtmlMessage(src, message, chan);
};

hlr.sendErrorTo = function(src, message, chan) {
  return hlr.sendPlayerHtml(src, "<timestamp/><i>" + message + "</i>", chan);
};

hlr.sendTo = function(src, message, chan) {
  return hlr.sendPlayer(src, message, chan);
};

hlr.player = {};

hlr.player.player = function(id) {
  return hlr.players[hlr.namelOf(id)];
};

hlr.player.registered = function(id) {
  return hlr.namelOf(id) in hlr.players;
};

hlr.player.register = function(id) {
  if (hlr.player.registered(id)) {
    hlr.error("hlr.player.register called on a registered player");
  }
  hlr.players[id.toLowerCase()] = {
    name: id,
    inventory: {},
    loadouts: {}
  };
  return hlr.players.markDirty();
};

hlr.player.initStorage = function() {
  var players;
  players = new hlr.JsonStore("hlr-players.json");
  hlr.player.jsonstore = players;
  return hlr.players = players.hash;
};

hlr.nameOf = function(id) {
  if (typeof id === 'number') {
    return SESSION.users(id).originalName;
  } else {
    return id;
  }
};

hlr.namelOf = function(id) {
  return hlr.nameOf(id).toLowerCase();
};

hlr.error = function(str) {
  throw new Error(str);
};

hlr.clone = function(obj) {
  var key, newInstance;
  if ((obj == null) || typeof obj !== 'object') {
    return obj;
  }
  newInstance = new obj.constructor();
  for (key in obj) {
    newInstance[key] = clone(obj[key]);
  }
  return newInstance;
};
hlr.player.initStorage();
hlr.initItemStorage();

hlr.addClasses();
hlr.addItems();
hlr.addCommands();

module.exports = hlr;
exports.serverShutDown = function () {
    var len, i;
    for (i = 0, len = hlr.persistence.stores.length; i < len; i += 1) {
        hlr.persistence.stores[i].saveAll();
    }
};

var stepTimer = 0;
exports.step = function () {
    stepTimer += 1;

    var store, len, i;
    for (i = 0, len = hlr.persistence.stores.length; i < len; i += 1) {
        store = hlr.persistence.stores[i];
        if (store.saverate % stepTimer === 0) {
            store.saveAll();
        }
    }
};

module.reload = function () {
    // Update commands inside events
    require.reload('events.js');
    return true;
};
var hlr = {
    version: 0,

    maintainers: ['TheUnknownOne'],
    support: ['TheUnknownOne'],

    isMaintainer: function (id) {
        return hlr.maintainers.indexOf(hlr.nameOf(id)) > -1;
    },
    onSupportTeam: function (id) {
        return hlr.support.indexOf(hlr.nameOf(id)) > -1;
    },

    channame: "Highlanders",
    chan: -1
};

hlr.chan = sys.createChannel(hlr.channame) || sys.channelId(hlr.channame);
// Generated by CoffeeScript 1.7.1
var itemCbs,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

hlr.Class = (function() {
  function Class(_arg) {
    this.id = _arg.id, this.name = _arg.name, this.loadout = _arg.loadout;
  }

  return Class;

})();

hlr["class"] = function(id) {
  return hlr.classes.classes[id];
};

hlr.classes = {};

hlr.classes.classes = {};

hlr.classes.makeClass = function(params) {
  var clas;
  clas = new hlr.Class(params);
  return hlr.classes.classes[clas.id] = clas;
};

hlr.addClasses = function() {
  var makeClass;
  makeClass = hlr.makeClass;
  return makeClass({
    id: "scout",
    name: "Scout",
    loadout: ["scattergun", "pistol_scout", "bat"]
  });
};

hlr.commands = {};

hlr.canUseCommand = function(src, command, chan) {
  if (!hlr.commands.hasOwnProperty(command)) {
    return false;
  }
  command = hlr.commands[command];
  if (hlr.isMaintainer(src)) {
    return true;
  }
  if (command.auth === 'maintainer') {
    return false;
  }
  if (command.auth === 'support') {
    return hlr.onSupportTeam(src);
  }
  if (command.auth === 'registered') {
    if (hlr.player.registered(src)) {
      return true;
    } else {
      throw "In order to use this command, you must first <a href='po:send//hlrreg'>Register a Highlanders account</a>, or sign into an already existing account.";
    }
  }
  return true;
};

hlr.handleCommand = function(src, message, command, commandData, tar, chan) {
  return hlr.commands[command].handler.call({
    src: src,
    command: command,
    commandData: commandData,
    tar: tar,
    chan: chan,
    message: message
  });
};

hlr.addCommand = function(name, handler, auth) {
  if (auth == null) {
    auth = '';
  }
  return hlr.commands[name] = {
    name: name,
    handler: handler,
    auth: auth
  };
};

hlr.authSupport = 'support';

hlr.authRegistered = 'registered';

hlr.authMaintainer = 'maintainer';

hlr.addCommands = function() {
  var addCommand, maintainer, registered, support;
  addCommand = hlr.addCommand, support = hlr.authSupport, maintainer = hlr.authMaintainer, registered = hlr.authRegistered;
  addCommand('commands', function() {
    return hlr.sendTo(this.src, "Highlanders Commands\n====================\n\ncommands: Shows this message.\nregister: Register a highlanders account on this name.\n\nTo use the following, you must have registered first:\n-----------------------------------------------------\n\ninventory: Shows your inventory.", chan);
  });
  return addCommand('register', function() {
    if (hlr.player.registered(this.src)) {
      return hlr.sendErrorTo(this.src, "Your account is already registered.", this.chan);
    } else {
      hlr.player.register(this.src);
      return hlr.sendTo(this.src, "Account registered! Check out the other commands.", this.chan);
    }
  });
};

hlr.inv = {};

hlr.inv.resolveItem = function(id, itemid) {
  return hlr.player.player(id).inventory[itemid];
};

hlr.inv.giveItem = function(id, item) {
  var player;
  player = hlr.player(id);
  if (player == null) {
    hlr.error("hlr.giveItemTo: bad player");
  } else if (player.inventory[item.id] != null) {
    hlr.error("hlr.giveItemTo: item " + (JSON.stringify(item)) + " already in inventory of " + id);
  }
  return player.inventory[item.id] = item;
};

hlr.inv.loadoutForClass = function(id, clas) {
  var player;
  return player = hlr.player(id);
};

hlr.items = {};

hlr.itemstore = null;

itemCbs = [];

hlr.Item = (function() {
  function Item(_arg) {
    this.id = _arg.id, this.name = _arg.name, this.desc = _arg.desc, this.slot = _arg.slot, this.classes = _arg.classes;
    this.attributes = [];
  }

  Item.Primary = 0;

  Item.Secondary = 1;

  Item.Melee = 2;

  Item.Cosmetic = 3;

  Item.Misc = 4;

  Item.Taunt = 5;

  Item.Unique = 0;

  Item.Genuine = 1;

  return Item;

})();

hlr.InventoryItem = (function() {
  function InventoryItem(_arg) {
    this.item = _arg.item, this.id = _arg.id, this.quality = _arg.quality;
  }

  InventoryItem.prototype.toJSON = function() {
    return {
      item: this.item,
      id: this.id,
      quality: this.quality
    };
  };

  InventoryItem.prototype.name = function() {
    return "" + (this.quality === hlr.Item.Unique ? '' : hlr.itemQualityName(this.quality) + ' ') + (hlr.item(this.item).name);
  };

  return InventoryItem;

})();

hlr.itemSlotName = function(slot) {
  var item;
  item = hlr.Item;
  switch (slot) {
    case item.Primary:
      return "Primary";
    case item.Secondary:
      return "Secondary";
    case item.Melee:
      return "Melee";
    case item.Cosmetic:
      return "Cosmetic";
    case item.Misc:
      return "Misc";
    case item.Taunt:
      return "Taunt";
    default:
      return hlr.error("hlr.itemSlotName: unknown item slot " + slot);
  }
};

hlr.itemQualityName = function(quality) {
  var item;
  item = hlr.Item;
  switch (quality) {
    case item.Unique:
      return "Unique";
    case item.Genuine:
      return "Genuine";
    default:
      return hlr.error("hlr.itemQualityName: unknown item quality " + quality);
  }
};

hlr.item = function(id) {
  return hlr.items[id];
};

hlr.registerItem = function(item) {
  return hlr.items[item.id] = item;
};

hlr.makeItem = function(_arg) {
  var clas, classes, classids, desc, id, name, slot, _i, _len;
  id = _arg.id, name = _arg.name, desc = _arg.desc, classes = _arg.classes, slot = _arg.slot;
  if (desc == null) {
    desc = "";
  }
  classids = [];
  for (_i = 0, _len = classes.length; _i < _len; _i++) {
    clas = classes[_i];
    classids.push(hlr["class"](clas).idc);
  }
  return hlr.registerItem(new hlr.Item({
    id: id,
    name: name,
    desc: desc,
    classes: classids,
    slot: slot
  }));
};

hlr.createItem = function(_arg) {
  var item, quality;
  item = _arg.item, quality = _arg.quality;
  if (!item) {
    hlr.error("hlr.createItem: no item given");
  }
  if (!quality) {
    hlr.error("hlr.createItem: no quality given");
  }
  item = new hlr.InventoryItem({
    item: item,
    id: hlr.itemstore.uniqid,
    quality: quality
  });
  hlr.itemstore.uniqid += 1;
  return item;
};

hlr.addItems = function(cb) {
  var adds, _i, _len;
  if (cb) {
    itemCbs.push(cb);
  } else {
    for (_i = 0, _len = itemCbs.length; _i < _len; _i++) {
      adds = itemCbs[_i];
      adds();
    }
  }
  return null;
};

hlr.initItemStorage = function() {
  var ItemJsonStore;
  ItemJsonStore = (function(_super) {
    __extends(ItemJsonStore, _super);

    function ItemJsonStore() {
      return ItemJsonStore.__super__.constructor.apply(this, arguments);
    }

    ItemJsonStore.prototype.initDefaults = function() {
      var _base;
      return (_base = this.hash).uniqid != null ? _base.uniqid : _base.uniqid = 0;
    };

    return ItemJsonStore;

  })(hlr.JsonStore);
  hlr._itemjsonstore = new ItemJsonStore("hlr-items.json");
  return hlr.itemstore = hlr._itemjsonstore.hash;
};

hlr.addItems = function() {
  var Melee;
  Melee = hlr.Item.Melee;
  return hlr.makeItem({
    id: "bat",
    name: "Bat",
    classes: ["scout"],
    slot: Melee
  });
};

hlr.addItems = function() {
  var Primary;
  Primary = hlr.Item.Primary;
  return hlr.makeItem({
    id: "scattergun",
    name: "Scattergun",
    classes: ["scout"],
    slot: Primary
  });
};

hlr.addItems = function() {
  var Secondary;
  Secondary = hlr.Item.Secondary;
  return hlr.makeItem({
    id: "pistol_scout",
    name: "Pistol",
    classes: ["scout"],
    slot: Secondary
  });
};

hlr.persistence = {
  stores: []
};

hlr.JsonStore = (function() {
  function JsonStore(file, saverate) {
    this.file = file;
    this.saverate = saverate != null ? saverate : 60;
    hlr.persistence.stores.push(this);
    this.hash = {};
    this.dirty = false;
    this.load();
    this.initDefaults();
  }

  JsonStore.prototype.markDirty = function() {
    return this.dirty = true;
  };

  JsonStore.prototype.load = function() {
    if (sys.fileExist(this.file)) {
      return this.hash = JSON.parse(sys.getFileContent(this.file));
    }
  };

  JsonStore.prototype.saveAll = function() {
    if (this.dirty) {
      return sys.writeToFile(this.file, JSON.stringify(this.hash));
    }
  };

  JsonStore.prototype.initDefaults = function() {};

  return JsonStore;

})();

hlr.sendMsg = function(message, chan) {
  if (chan == null) {
    chan = hlr.chan;
  }
  return sys.sendAll(message, chan);
};

hlr.sendHtml = function(message, chan) {
  if (chan == null) {
    chan = hlr.chan;
  }
  return sys.sendHtmlAll(message, chan);
};

hlr.sendPlayer = function(src, message, chan) {
  if (chan == null) {
    chan = hlr.chan;
  }
  return sys.sendMessage(src, message, chan);
};

hlr.sendPlayerHtml = function(src, message, chan) {
  if (chan == null) {
    chan = hlr.chan;
  }
  return sys.sendHtmlMessage(src, message, chan);
};

hlr.sendErrorTo = function(src, message, chan) {
  return hlr.sendPlayerHtml(src, "<timestamp/><i>" + message + "</i>", chan);
};

hlr.sendTo = function(src, message, chan) {
  return hlr.sendPlayer(src, message, chan);
};

hlr.player = {};

hlr.player.player = function(id) {
  return hlr.players[hlr.namelOf(id)];
};

hlr.player.registered = function(id) {
  return hlr.namelOf(id) in hlr.players;
};

hlr.player.register = function(id) {
  if (hlr.player.registered(id)) {
    hlr.error("hlr.player.register called on a registered player");
  }
  hlr.players[id.toLowerCase()] = {
    name: id,
    inventory: {},
    loadouts: {}
  };
  return hlr.players.markDirty();
};

hlr.player.initStorage = function() {
  var players;
  players = new hlr.JsonStore("hlr-players.json");
  hlr.player.jsonstore = players;
  return hlr.players = players.hash;
};

hlr.nameOf = function(id) {
  if (typeof id === 'number') {
    return SESSION.users(id).originalName;
  } else {
    return id;
  }
};

hlr.namelOf = function(id) {
  return hlr.nameOf(id).toLowerCase();
};

hlr.error = function(str) {
  throw new Error(str);
};

hlr.clone = function(obj) {
  var key, newInstance;
  if ((obj == null) || typeof obj !== 'object') {
    return obj;
  }
  newInstance = new obj.constructor();
  for (key in obj) {
    newInstance[key] = clone(obj[key]);
  }
  return newInstance;
};
hlr.player.initStorage();
hlr.initItemStorage();

hlr.addClasses();
hlr.addItems();
hlr.addCommands();

module.exports = hlr;
exports.serverShutDown = function () {
    var len, i;
    for (i = 0, len = hlr.persistence.stores.length; i < len; i += 1) {
        hlr.persistence.stores[i].saveAll();
    }
};

var stepTimer = 0;
exports.step = function () {
    stepTimer += 1;

    var store, len, i;
    for (i = 0, len = hlr.persistence.stores.length; i < len; i += 1) {
        store = hlr.persistence.stores[i];
        if (store.saverate % stepTimer === 0) {
            store.saveAll();
        }
    }
};

module.reload = function () {
    // Update commands inside events
    require.reload('events.js');
    return true;
};
